package {{invokerPackage}};

import com.fasterxml.jackson.core.JsonGenerator.Feature;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;

import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.Entity;
import javax.ws.rs.client.Invocation;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.Form;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.io.IOException;
import java.net.URLEncoder;
import java.io.UnsupportedEncodingException;

public class ApiInvoker {
  {{! wikia }}
  private static final String RESTRICTED_HEADERS_PROPERTY = "sun.net.http.allowRestrictedHeaders";
  {{! /wikia }}
  private static ApiInvoker INSTANCE = new ApiInvoker();
  private Map<String, Client> hostMap = new HashMap<String, Client>();
  private Map<String, String> defaultHeaderMap = new HashMap<String, String>();
  private boolean isDebug = false;

  public void enableDebug() {
    isDebug = true;
  }

  public static ApiInvoker getInstance() {
    return INSTANCE;
  }

  public void addDefaultHeader(String key, String value) {
     defaultHeaderMap.put(key, value);
  }

  public String escapeString(String str) {
    try{
      return URLEncoder.encode(str, "utf8").replaceAll("\\+", "%20");
    }
    catch(UnsupportedEncodingException e) {
      return str;
    }
  }

  public static Object deserialize(String json, String containerType, Class cls) throws ApiException {
    try{
      if("List".equals(containerType)) {
        JavaType typeInfo = JsonUtil.getJsonMapper().getTypeFactory().constructCollectionType(List.class, cls);
        List response = (List<?>) JsonUtil.getJsonMapper().readValue(json, typeInfo);
        return response;
      }
      else if(String.class.equals(cls)) {
        if(json != null && json.startsWith("\"") && json.endsWith("\"") && json.length() > 1)
          return json.substring(1, json.length() - 2);
        else
          return json;
      }
      else {
        return JsonUtil.getJsonMapper().readValue(json, cls);
      }
    }
    catch (IOException e) {
      throw new ApiException(500, e.getMessage());
    }
  }

  public static String serialize(Object obj) throws ApiException {
    try {
      if (obj != null)
        return JsonUtil.getJsonMapper().writeValueAsString(obj);
      else
        return null;
    }
    catch (Exception e) {
      throw new ApiException(500, e.getMessage());
    }
  }

  public String invokeAPI(String host, String path, String method, Map<String, String> queryParams, Object body, Map<String, String> headerParams, Map<String, String> formParams, String contentType) throws ApiException {
    Client client = getClient(host);
    WebTarget webTarget = client.target(host).path(path);

    for(String key : queryParams.keySet()) {
      webTarget = webTarget.queryParam(key, queryParams.get(key));
    }

    Invocation.Builder builder = webTarget.request(MediaType.APPLICATION_JSON);
    {{! wikia }}
    String currentRestrictedSetting = System.getProperty(RESTRICTED_HEADERS_PROPERTY);
    System.setProperty(RESTRICTED_HEADERS_PROPERTY, "true");
    {{! /wikia }}

    for(String key : headerParams.keySet()) {
      builder.header(key, headerParams.get(key));
    }

    {{! wikia }}
    if (currentRestrictedSetting != null) {
      System.setProperty(RESTRICTED_HEADERS_PROPERTY, currentRestrictedSetting);
    }
    {{! /wikia }}

    for(String key : defaultHeaderMap.keySet()) {
      if(!headerParams.containsKey(key)) {
        builder.header(key, defaultHeaderMap.get(key));
      }
    }
    Response response = null;

    if("GET".equals(method)) {
      response = builder.get();
    }
    /*else if ("POST".equals(method)) {
      Entity entity;

      if(body == null)
        entity = Entity.entity(null, null);
      else if(body instanceof Form)
        entity = Entity.entity(body, contentType);
      else
        entity = Entity.entity(serialize(body), contentType);

      response = builder.post(entity);
    }
    else if ("PUT".equals(method)) {
      if(body == null)
        response = builder.put(ClientResponse.class, serialize(body));
      else {
        if("application/x-www-form-urlencoded".equals(contentType)) {
          StringBuilder formParamBuilder = new StringBuilder();

          // encode the form params
          for(String key : formParams.keySet()) {
            String value = formParams.get(key);
            if(value != null && !"".equals(value.trim())) {
              if(formParamBuilder.length() > 0) {
                formParamBuilder.append("&");
              }
              try {
                formParamBuilder.append(URLEncoder.encode(key, "utf8")).append("=").append(URLEncoder.encode(value, "utf8"));
              }
              catch (Exception e) {
                // move on to next
              }
            }
          }
          response = builder.type(contentType).put(ClientResponse.class, formParamBuilder.toString());
        }
        else
          response = builder.type(contentType).put(ClientResponse.class, serialize(body));
      }
    }
    else if ("DELETE".equals(method)) {
      if(body == null)
        response = builder.delete(ClientResponse.class, serialize(body));
      else
        response = builder.type(contentType).delete(ClientResponse.class, serialize(body));
    }*/
    else {
      throw new ApiException(500, "unknown method type " + method);
    }
    if(response.getStatusInfo() == Response.Status.NO_CONTENT) {
      return null;
    }
    else if(response.getStatusInfo().getFamily() == Response.Status.Family.SUCCESSFUL) {
      return response.readEntity(String.class);
    }
    else {
      throw new ApiException(
                response.getStatus(),
                response.getStatusInfo().getReasonPhrase());
    }
  }

  private Client getClient(String host) {
    if(!hostMap.containsKey(host)) {
      Client client = ClientBuilder.newClient();
      hostMap.put(host, client);
    }
    return hostMap.get(host);
  }
}
